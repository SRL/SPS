type
  TSPSMinimap = record x1, y1, x2, y2, Inner, Outter: Integer; FlagFinder: function(out p: TPoint): boolean of object; end;
  TSPSWalkEvent = record Proc: function: Boolean; PollTime: Integer; ExitOnResult: Boolean; end;
  TSPSMethod = (SPS_LEGACY, SPS_CV);
  TSPSEvent = procedure();
  TSPSMouseEvent = function(const pnt: TPoint): Boolean;

  TSPSArea = record
    {$IFNDEF CODEINSIGHT}
    _fImagePath: String;
    _fMethod: TSPSMethod;
    _fMap: T3DIntegerArray;
    _fMatrix: T2DIntegerArray;
    _fSetup: Boolean;
    _fMinimap: TSPSMinimap;
    {$ENDIF}

    {Vars that effect both}
    Randomness: Integer;
    MultiClick, AnyAngle: Boolean;
    Name: String;

    {Vars for legacy mode}
    Accuracy: Byte;
    Tolerance, MinMatchPercent: Extended;

    {Events}
    onWalkFail, onWalkStart, onGetPosition: TSPSEvent;
    onMouse: TSPSMouseEvent;
    onWalking: TSPSWalkEvent;
  end;

procedure TSPSArea.Setup(const ImagePath: String; const Method: TSPSMethod; const Minimap: TSPSMinimap; const Name: String = '');
var
  Bitmap: TMufasaBitmap;
  Time: UInt64 := GetTickCount64();
begin
  if (Self._fSetup) then
    Exit();

  if (not FileExists(ImagePath)) then
  begin
    Writeln('FATAL: the path "" doesnt exist, cannot setup SPS area');
    TerminateScript();
  end;

  // If the name isn''t set, lets work it out.
  if (Self.Name = '') then
    Self.Name := Between('"', '"', ToString(@Self));

  if (Self.Name = '') then
    Self.Name := 'SPS';

  Self._fImagePath := ImagePath;
  Self._fMethod := Method;
  Self._fMinimap := Minimap;

  with (Self._fMinimap) do
    if (@FlagFinder = nil) or (x1 = 0) or (y1 = 0) or (x2 = 0) or (y2 = 0) then
    begin
      Writeln(Format('FATAL: Minimap vars aren''t set [%s, %d, %d, %d, %d]', [toString(Pointer(@FlagFinder)), x1, y1, x2, y2]));
      TerminateScript();
    end;

  try
    Bitmap.Init(Client.getMBitmaps());
    Bitmap.LoadFromFile(Self._fImagePath);

    case (Method) of
      SPS_CV:
        Self._fMatrix := Bitmap.ToMatrix();
      SPS_LEGACY:
        ;
    end;
  finally
    Bitmap.Free();
  end;

  Self._fSetup := True;
  Writeln(Format('Succesfully setup SPS Area "%s" in %d ms [%s, %s]', [Self.Name, GetTickCount64() - Time, Self._fImagePath, ToString(Self._fMethod)]));
end;

procedure TSPSArea.Setup(const ImagePath: String; const Method: TSPSMethod; const Name: String = ''); overload;
var
  Minimap: TSPSMinimap;
begin
  {$IFDEF RS3}
  with (Minimap) do
  begin
    FlagFinder := @Minimap.ReturnFlagPos;
    x1 := Minimap.x1;
    y1 := Minimap.y1;
    x2 := Minimap.x2;
    y2 := Minimap.y2;
    Inner := 0;
    Outter := 0;
  end;
  {$ENDIF}

  {$IFDEF OSR}
  with (Minimap) do
  begin
    FlagFinder := nil;
    x1 := 0;
    y1 := 0;
    x2 := 0;
    y2 := 0;
    Inner := 0;
    Outter := 0;
  end;
  {$ENDIF}

  Self.Setup(ImagePath, Method, Minimap, Name);
end;

procedure TSPSArea.Mouse(const pnt: TPoint);
begin
  if (@Self.onMouse <> nil) then
    if (Self.onMouse(pnt)) then
      Exit();
end;

function TSPSArea.GetPlayerPos(): TPoint;
begin
  if (@Self.onGetPosition <> nil) then
    Self.onGetPosition();

  Self.Mouse(point(500, 500));
end;

procedure TSPSArea.WalkPath(const Path: TPointArray);
begin
  if (@Self.onWalkStart <> nil) then
    Self.onWalkStart();
end;



