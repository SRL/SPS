//-----------------------------------------------------------------//
//--                SRL Resource Library                         --//
//--                Positioning routines                         --//
//-----------------------------------------------------------------//
// *  SPS_GetMyPos: TPoint;                            by: marpis  //
// *  SPS_PosToMM(P: TPoint): TPoint;                  by: marpis  //
// *  SPS_WalkToPos(P: TPoint): boolean;               by: marpis  //
// *  SPS_WalkPath(Path: TPointArray): boolean;        by: marpis  //
// *                                                               //
//-----------------------------------------------------------------//

{$loadlib sps} // Load the sps library


const
// Path where all the SPS files are
  SPS_IMG_PATH   = IncludePath + 'SPS\img\runescape_surface\';
  SPS_IMG_FMT    = '.png';
// RGB tolerance used, 0.2 = 20% etc.
  SPS_TOLERANCE  = 0.2;

// Offsets for Reflection conversion
  SPS_OFFSET_X = 2044.0;
  SPS_OFFSET_Y = 4162.0;

// SPS Global variables
var
  SPS_Loaded, SPS_Debug: boolean;
  SPS_Areas: TStringArray;
  SPS_Worldmap: T4DIntegerArray;

function SPS_GatherMinimap: T3DIntegerArray;
var
  bmp: TMufasaBitmap;
  c: TClient;
begin
  try
    bmp := TMufasaBitmap.Create;
    bmp.SetSize(100, 100);
    //writeln('created bitmap');
    c := getTClient;
    bmp.CopyClientToBitmap(
        c.IOManager, false, 0,0, MMCX-50, MMCY-50, MMCX+50, MMCY+50
      );
    //writeln('copied the bitmap to the bitmap..');
    Result := SPS_BitmapToMap(bmp);
    //Writeln('result set..');
  finally
    bmp.free; // just in case
  except
    Writeln('[ERROR] GATHERMINIMAP:: '+ExceptionToString(ExceptionType, ExceptionParam));
  end;
end;


procedure SPS_GetAreaCoords(Area: string; var x, y: integer);
var
  p: integer;
begin
  p := pos('_', Area);
  if (p <= 0) then
    // raise an exception if Area is of wrong format
    RaiseException(erCustomError, 'Invalid Area passed: ' + area);

  x := StrToIntDef(copy(Area, 1, p-1), -1);
  y := StrToIntDef(copy(Area, p+1, Length(Area)-p), -1);
  if (SPS_Debug) then
    writeln(format('[SPS] area coords (%d, %d)', [x,y]));
end;

function SPS_LocalToGlobal(Area: string; x, y: integer): TPoint;
var
  cx, cy: integer;
begin
  SPS_GetAreaCoords(Area, cx, cy);
  Result.x := cx*400 + x;
  Result.y := cy*400 + y;
end;

procedure LoadSPS;
var
  L, i, timer : integer;
  img: TMufasaBitmap;
begin
  timer := getSystemTime;
  L := Length(SPS_Areas);

  if (L <= 0) then
  begin
    writeln('[SPS] WARNDING: SPS_Areas hasn''t been set');
    exit;
  end;

  // clean up the old one just in case, we do not want copies in wrong places.
  SetLength(SPS_WorldMap, 0);
  SetLength(SPS_Worldmap, L);

  //Writeln('[SPS] Building maps... Estimated time: '+ToStr(5600*L)+' ms.');
  for i := L-1 downto 0 do
  begin
    try
		  img := TMufasaBitmap.Create;
		  img.LoadFromFile(SPS_IMG_PATH + SPS_Areas[i] + SPS_IMG_FMT);
		  SPS_Worldmap[i] := SPS_BitmapToMap(img);
    finally
      img.free; // just in case ;)
    except
      Writeln('[ERROR] LOADSPS: '+ExceptionToString(ExceptionType, ExceptionParam));
    end;
  end;

  if (SPS_Debug) then
    Writeln('[SPS] Maps loaded in '+ToStr(getSystemTime - timer)+'ms.');
  SPS_Loaded := True;
end;


function SPS_GetMyPos: TPoint;
var
  Minimap: T3DIntegerArray;
  t, i, map: integer;
begin
  Result := Point(-1, -1);
  
  if not LoggedIn then
    Exit;

  if not SPS_Loaded then
    LoadSPS;
  
  // we should just rotate the minimap according to the minimap angle.
  ClickNorth(True);

  t := getSystemTime;
  Minimap := SPS_GatherMinimap;
  if (High(Minimap) < 0) then
  begin
    if (SPS_Debug) then
      WriteLn('[SPS] Did not gather Minimap.');
    Exit;
  end;
    
  //WriteLn('gathered minimap..');
  try
    map := SPS_FindMapInMapEx(
        Result.X, Result.Y, SPS_Worldmap, Minimap, SPS_TOLERANCE
      );
    //writeln('found map in map ex. :D');
    if ((Result.X > 0) and (Result.Y > 0)) then
    begin
      Result := SPS_LocalToGlobal(SPS_Areas[map], Result.X, Result.Y);
    end;

    //writeln(
    //    Format(
    //        '[SPS] GetMyPos :: Finished in %d ms. Location = %s',
    //        [getSystemTime-t, ToStr(Result)]
    //      )
    //  );
  except
    Writeln('[SPS] ERROR' + ExceptionToString(ExceptionType, ExceptionParam));
  end;
end;

function SPS_PixelToPoint(pixel: TPoint): TPoint;
begin
  Result.X := Round(SPS_OFFSET_X + (pixel.X / 4));
  Result.Y := Round(SPS_OFFSET_Y - (pixel.Y / 4));
end;

function SPS_PointToPixel(point: TPoint): TPoint;
begin
  Result.X := Round((point.x - SPS_OFFSET_X) * 4);
  Result.Y := Round((SPS_OFFSET_Y - point.y) * 4);
end;

// Finds position P in minimap by checking your own location
function SPS_PosToMM(P: TPoint): TPoint;
var
  MyPos: TPoint;
begin
  if not LoggedIn then Exit;
  Result := Point(-1, -1);
  MyPos := SPS_GetMyPos;
  if Distance(MyPos.X, MyPos.Y, P.X, P.Y) < 72 then
    Result := Point(MMCX + P.X - MyPos.X,
                    MMCY + P.Y - MyPos.Y);
end;

// Walks to position. If walking paths, please use WalkPath.
function SPS_WalkToPos(P: TPoint): boolean;
var
  MM: TPoint;
begin
  if not LoggedIn then Exit;
  MM := SPS_PosToMM(P);

  if (MM.X > 0) then
  begin
    Mouse(MM.X, MM.Y, 0, 0, True);
    if WaitFunc(@IsMoving, 1, 3000 + random(500)) then
      while IsMoving do
        Flag;
    Result := True;
  end;
end;

function SPS_PosOnMM(Pt: TPoint): Boolean;
var
  p: TPoint;
begin
  p := SPS_PosToMM(Pt);
  Result := rs_OnMinimap(p.x, p.y);
end;

// Walks from A to B, always walking as far as possible.
function SPS_WalkPath(Path: TPointArray): boolean;
var
  I, H, T: integer;
  P, MM: TPoint;
begin
  H := High(Path);
  T := GetSystemTime + 20000 + Random(5000);
  while (not Result) and (GetSystemTime < T) do
  begin
    P := SPS_GetMyPos;
    for I := H downto 0 do
    begin
      MM.X := MMCX + Path[I].X - P.X;
      MM.Y := MMCY + Path[I].Y - P.Y;
      if (Distance(MM.X, MM.Y, MMCX, MMCY) < 70) then
      begin
        MouseFlag(MM.X, MM.Y, 0, 0, Integer(I<>H)*10);
        T := getSystemTime + 20000 + Random(1000);
 	      Break;
      end;
    end;
    Result := (I = H);
  end;
end;
